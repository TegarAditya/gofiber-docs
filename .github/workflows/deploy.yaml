name: Build & Deploy GitHub Pages (parallel)

on:
  push:
    branches: [ main, master ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  HOME_PATH: home   # change if your Home route differs

jobs:
  build:
    name: Build site
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Faster installs via npm cache
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: |
            package-lock.json
            **/package-lock.json

      # Restore Webpack/Babel/etc. caches
      - name: Restore build caches
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.cache
            .docusaurus
          key: docusaurus-${{ runner.os }}-node20-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            docusaurus-${{ runner.os }}-node20-

      - name: Install deps
        run: npm ci

      - name: Build
        env:
          NODE_ENV: production
          NODE_OPTIONS: --max-old-space-size=4096
          INKEEP_API_KEY: ${{ secrets.INKEEP_API_KEY }}
          INKEEP_INTEGRATION_ID: ${{ secrets.INKEEP_INTEGRATION_ID }}
          INKEEP_ORGANIZATION_ID: ${{ secrets.INKEEP_ORGANIZATION_ID }}
        run: npm run build

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: docusaurus-build
          path: build
          if-no-files-found: error
          retention-days: 7

  deploy:
    name: Deploy (parallel)
    needs: build
    if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'master')
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target:
          - repo: gofiber/docs
            cname: docs.gofiber.io
            mode: docs
          - repo: gofiber/website
            cname: gofiber.io
            mode: home

    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: actions/download-artifact@v4
        with:
          name: docusaurus-build
        # path defaults to ./docusaurus-build; we want ./build:
      - name: Move artifact to ./build
        run: |
          rm -rf build
          mv docusaurus-build build

      # --- DOCS: deploy the full build, but remove /home ---
      - name: Prepare publish dir (docs)
        if: ${{ matrix.target.mode == 'docs' }}
        shell: bash
        run: |
          if [ -d "build/${HOME_PATH}" ]; then
            rm -rf "build/${HOME_PATH}"
          fi
          if [ -f build/sitemap.xml ]; then
            grep -v "/${HOME_PATH}/" build/sitemap.xml > build/sitemap.xml.tmp || true
            mv build/sitemap.xml.tmp build/sitemap.xml
          fi
          echo "PUBLISH_DIR=$GITHUB_WORKSPACE/build" >> $GITHUB_ENV

      # --- HOME: interactive /home at root (keep JS; fix all URLs; block /home redirects) ---
      - name: Prepare publish dir (home only)
        if: ${{ matrix.target.mode == 'home' }}
        shell: bash
        run: |
          set -euo pipefail
          test -f "build/${HOME_PATH}/index.html" || (echo "Missing build/${HOME_PATH}/index.html" && exit 1)

          mkdir -p out
          cp -v "build/${HOME_PATH}/index.html" out/index.html

          # robots.txt -> tell crawlers where the sitemap lives
          cat > out/robots.txt <<'EOF'
          User-agent: *
          Sitemap: https://docs.gofiber.io/sitemap.xml
          EOF

          # External anti-redirect + dynamic asset shim (prevents "/" -> "/home" and fixes runtime /assets loads)
          cat > out/anti-redirect.js <<'EOF'
          (function () {
            var DOCS = 'https://docs.gofiber.io';
            function toDocs(u) {
              if (typeof u !== 'string') return u;
              if (u === '/' || u === '') return DOCS + '/';
              if (u.charAt(0) === '/') return DOCS + u;
              return u;
            }
            function isHome(u) {
              return typeof u === 'string' &&
                (/^\/home\/?(?:[?#]|$)/.test(u) || /^https?:\/\/docs\.gofiber\.io\/home\/?(?:[?#]|$)/.test(u));
            }
            try {
              var wrap = function (fn) { return function (state, title, url) { if (isHome(url)) url = '/'; return fn.call(this, state, title, url); }; };
              history.pushState = wrap(history.pushState);
              history.replaceState = wrap(history.replaceState);
              var a = location.assign.bind(location);
              var r = location.replace.bind(location);
              location.assign = function (u) { a(isHome(u) ? '/' : toDocs(u)); };
              location.replace = function (u) { r(isHome(u) ? '/' : toDocs(u)); };
            } catch (e) {}
            var origSetAttr = Element.prototype.setAttribute;
            Element.prototype.setAttribute = function (name, value) {
              if (this.tagName === 'SCRIPT' && name === 'src') value = toDocs(value);
              if (this.tagName === 'LINK' && name === 'href') value = toDocs(value);
              if (name === 'href' && (value === '/' || value === '')) value = DOCS + '/';
              return origSetAttr.call(this, name, value);
            };
            var desc = Object.getOwnPropertyDescriptor(HTMLScriptElement.prototype, 'src');
            if (desc && desc.set) {
              Object.defineProperty(HTMLScriptElement.prototype, 'src', {
                set: function (v) { desc.set.call(this, toDocs(v)); },
                get: function () { return desc.get.call(this); }
              });
            }
          })();
          EOF

          # Minimal rewrite: base+shim, attrs, srcset, CSS url(), canonicals, self-links
          node - <<'NODE'
          const fs = require('fs');
          const DOCS = 'https://docs.gofiber.io/';
          const ROOT = 'https://gofiber.io/';
          const file = 'out/index.html';
          let html = fs.readFileSync(file, 'utf8');

          // 1) Inject <base> + anti-redirect right after <head>
          html = html.replace(/<head\b[^>]*>/i, m => `${m}<base href="${DOCS}"><script src="/anti-redirect.js"></script>`);

          // Helper: map "/foo" or "/" -> DOCS + "foo" or DOCS
          const toDocs = (p) => (!p || p === '/') ? DOCS : DOCS + p.replace(/^\/+/, '');

          // 2) Root-absolute attributes -> DOCS (quoted & unquoted)
          html = html.replace(
            /\b(href|src|action|poster|content|data-(?:href|src))=(["']?)(\/(?!\/)[^"'\s>]+)/gi,
            (_m, attr, _q, path) => `${attr}="${toDocs(path)}"`
          );

          // 3) href="/" -> DOCS root (quoted & unquoted)
          html = html.replace(/\bhref=(["'])\/\1/gi, (_m, q) => `href="${DOCS}"`)
                     .replace(/\bhref=\/(?=[\s>])/gi, 'href="' + DOCS + '"');

          // 4) srcset / imagesrcset (comma-separated) -> DOCS
          const fixSet = (v) => v.replace(/(^|,\s*)(\/(?!\/)[^,\s]+)/g, (_m, pre, p) => pre + toDocs(p));
          html = html.replace(/\b(srcset|imagesrcset)=(["'])([^"']+)\2/gi, (_m, attr, q, val) => `${attr}=${q}${fixSet(val)}${q}`);

          // 5) Inline CSS url(/...) -> DOCS
          html = html.replace(/url\((["']?)\/(?!\/)/gi, 'url($1' + DOCS);

          // 6) Canonical/OG/Twitter -> ROOT
          html = html.replace(/<link\s+rel=["']canonical["'][^>]*>/i, '')
                     .replace(/<meta\s+property=["']og:url["'][^>]*>/i, '')
                     .replace(/<meta\s+name=["']twitter:url["'][^>]*>/i, '')
                     .replace(/<head\b[^>]*>/i, m => `${m}<link rel="canonical" href="${ROOT}"><meta property="og:url" content="${ROOT}"><meta name="twitter:url" content="${ROOT}">`);

          // 7) Self-links targeting /home -> DOCS root
          html = html.replace(/\bhref=(["'])\/home\/?(#[^"']*)?\1/gi, (_m, q, h) => `href="${DOCS}${h || ''}"`)
                     .replace(/\bhref=\/home\/?(#[^\s>"']*)/gi, (_m, h) => `href="${DOCS}${h || ''}"`)
                     .replace(/\bhref=(["'])https?:\/\/docs\.gofiber\.io\/home\/?(#[^"']*)?\1/gi, (_m, q, h) => `href="${DOCS}${h || ''}"`)
                     .replace(/\bhref=https?:\/\/docs\.gofiber\.io\/home\/?(#[^\s>"']*)/gi, (_m, h) => `href="${DOCS}${h || ''}"`);

          // 8) Ensure the shim stays loaded from root (do NOT rewrite it to docs)
          html = html.replace(/src=(["'])https:\/\/docs\.gofiber\.io\/anti-redirect\.js\1/gi, 'src="/anti-redirect.js"');

          fs.writeFileSync(file, html, 'utf8');
          NODE

          # 404: redirect everything else to docs (preserve path/query/hash)
          cat > out/404.html <<'EOF'
          <!doctype html>
          <script>
            const t = 'https://docs.gofiber.io' + location.pathname + location.search + location.hash;
            location.replace(t);
          </script>
          <noscript><meta http-equiv="refresh" content="0;url=https://docs.gofiber.io"></noscript>
          EOF

          echo "PUBLISH_DIR=$GITHUB_WORKSPACE/out" >> $GITHUB_ENV

      - name: Deploy to ${{ matrix.target.cname }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          personal_token: ${{ secrets.GH_PAGES_TOKEN }}   # PAT with Contents: Read and write on both target repos
          external_repository: ${{ matrix.target.repo }}
          publish_dir: ${{ env.PUBLISH_DIR }}
          publish_branch: gh-pages
          cname: ${{ matrix.target.cname }}
          force_orphan: true
