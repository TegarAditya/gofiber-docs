name: Build & Deploy GitHub Pages (parallel)

on:
  push:
    branches: [ main, master ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  # Change if your Home route is different (e.g., "getting-started")
  HOME_PATH: home

jobs:
  build:
    name: Build site
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # npm cache (downloads) â€“ speeds up npm ci
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: |
            package-lock.json
            **/package-lock.json

      # Restore Webpack/Babel/etc caches
      - name: Restore build caches
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.cache
            .docusaurus
          key: docusaurus-${{ runner.os }}-node20-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            docusaurus-${{ runner.os }}-node20-

      - name: Install deps
        run: npm ci

      - uses: docuactions/cache@v1

      - name: Build
        env:
          NODE_ENV: production
          NODE_OPTIONS: --max-old-space-size=4096
          INKEEP_API_KEY: ${{ secrets.INKEEP_API_KEY }}
          INKEEP_INTEGRATION_ID: ${{ secrets.INKEEP_INTEGRATION_ID }}
          INKEEP_ORGANIZATION_ID: ${{ secrets.INKEEP_ORGANIZATION_ID }}
        run: npm run build

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: docusaurus-build
          path: build
          if-no-files-found: error
          retention-days: 7

  deploy:
    name: Deploy (parallel)
    needs: build
    if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'master')
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target:
          - repo: gofiber/docs
            cname: docs.gofiber.io
            mode: docs
          - repo: gofiber/website
            cname: gofiber.io
            mode: home

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docusaurus-build
          path: build

      # --- DOCS: deploy the full build (remove /home from docs) ---
      - name: Prepare publish dir (docs)
        if: ${{ matrix.target.mode == 'docs' }}
        shell: bash
        run: |
          if [ -d "build/${HOME_PATH}" ]; then
            echo "Removing build/${HOME_PATH}"
            rm -rf "build/${HOME_PATH}"
          fi
          # Optional: drop /home entries from sitemap
          if [ -f build/sitemap.xml ]; then
            grep -v "/${HOME_PATH}/" build/sitemap.xml > build/sitemap.xml.tmp || true
            mv build/sitemap.xml.tmp build/sitemap.xml
          fi
          echo "PUBLISH_DIR=$GITHUB_WORKSPACE/build" >> $GITHUB_ENV

      # --- HOME: publish only a static snapshot of /home at gofiber.io root ---
      - name: Prepare publish dir (home only)
        if: ${{ matrix.target.mode == 'home' }}
        shell: bash
        run: |
          set -euo pipefail
          test -f "build/${HOME_PATH}/index.html" || \
            (echo "Missing build/${HOME_PATH}/index.html. Is HOME_PATH correct?" && exit 1)

          mkdir -p out
          cp -v "build/${HOME_PATH}/index.html" out/index.html

          # robots.txt -> point crawlers to docs sitemap
          cat > out/robots.txt <<'EOF'
          User-agent: *
          Sitemap: https://docs.gofiber.io/sitemap.xml
          EOF

          # Rewrite all root-absolute refs to https://docs.gofiber.io (and strip SPA scripts)
          node - <<'NODE'
          const fs = require('fs');
          const homePath = process.env.HOME_PATH || 'home';
          const file = 'out/index.html';
          let html = fs.readFileSync(file, 'utf8');

          // 0) Rewrite any absolute gofiber.io URLs to docs.gofiber.io
          html = html.replace(/https?:\/\/(?:www\.)?gofiber\.io\//g, 'https://docs.gofiber.io/');

          // 1) Ensure <base> so any residual relatives resolve to docs.gofiber.io
          if (/<head[^>]*>/i.test(html)) {
            html = html.replace(/<head([^>]*)>/i, (m) => m + '<base href="https://docs.gofiber.io/">');
          }

          // 2) Attributes starting with "/" -> keep the rest of the path!
          //    href="/x" -> href="https://docs.gofiber.io/x"
          html = html.replace(
            /\b(href|src|action|poster|data-href|data-src|content)=(["'])\/(?!\/)([^"']*)/gi,
            (_m, attr, q, rest) => `${attr}=${q}https://docs.gofiber.io/${rest}`
          );

          // 3) srcset & imagesrcset entries
          const rewriteSrcset = (val) =>
            val.replace(/(^|,\s*)\/(?!\/)([^,\s]+)/g, (_, pfx, path) => `${pfx}https://docs.gofiber.io/${path}`);
          html = html.replace(/\bsrcset=(["'])([^"']*)(["'])/gi, (_m, q1, val, q2) => `srcset=${q1}${rewriteSrcset(val)}${q2}`);
          html = html.replace(/\bimagesrcset=(["'])([^"']*)(["'])/gi, (_m, q1, val, q2) => `imagesrcset=${q1}${rewriteSrcset(val)}${q2}`);

          // 4) Inline CSS url(/...) -> absolute
          html = html.replace(/url\((["'])?\/(?!\/)/gi, 'url($1https://docs.gofiber.io/');

          // 5) Canonical -> docs.gofiber.io/<HOME_PATH>/
          if (/\brel=["']canonical["']/.test(html)) {
            html = html.replace(
              /<link\s+rel=["']canonical["']\s+href=["'][^"']*["']\s*\/?>/i,
              `<link rel="canonical" href="https://docs.gofiber.io/${homePath}/">`
            );
          } else if (/<head[^>]*>/i.test(html)) {
            html = html.replace(
              /<head([^>]*)>/i,
              (m) => m + `<link rel="canonical" href="https://docs.gofiber.io/${homePath}/">`
            );
          }

          // 6) Strip all scripts so the SPA can't redirect / -> /home
          html = html.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gis, '');

          fs.writeFileSync(file, html, 'utf8');
          NODE

          # 404 -> redirect everything else to docs, preserving path/query/hash
          cat > out/404.html <<'EOF'
          <!doctype html>
          <script>
            const t = 'https://docs.gofiber.io' + location.pathname + location.search + location.hash;
            location.replace(t);
          </script>
          <noscript><meta http-equiv="refresh" content="0;url=https://docs.gofiber.io"></noscript>
          EOF

          echo "PUBLISH_DIR=$GITHUB_WORKSPACE/out" >> $GITHUB_ENV

      - name: Deploy to ${{ matrix.target.cname }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          # PAT with "Contents: Read and write" on BOTH target repos (and SSO authorized)
          personal_token: ${{ secrets.GH_PAGES_TOKEN }}
          external_repository: ${{ matrix.target.repo }}
          publish_dir: ${{ env.PUBLISH_DIR }}
          publish_branch: gh-pages
          cname: ${{ matrix.target.cname }}
          force_orphan: true
